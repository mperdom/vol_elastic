AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 template for Elastic/Kibana
Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 keypair.
    Default: hash-key
  InstanceType: 
    Description: "Elasticsearch/Kibana EC2 instance type"
    Type: String
    Default: m4.large
    AllowedValues:
    - t2.micro
    - t2.nano
    - t2.small
    - t2.medium
    - m4.large
  SSHLocation:
    Description: "The IP address range that can be used to SSH to the EC2 instances"
    Type: "String"
    MinLength: "9"
    MaxLength: "18"
    Default: "0.0.0.0/0"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x"
  S3BucketName:
    Description: "Name of the relevant S3 bucket"
    Type: "String"
    Default: cfrs772-elk
    
#start of actual resource creations
Resources:
  ElkS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  Effect: "Allow"
             Principal:
               Service:
                 - "ec2.amazonaws.com"
             Action: 
               - "sts:AssumeRole"
      Path: "/"
      # ManagedPolicyArns:
      #   - !Ref awsS3ManagedPolicy
      Policies:
        -
          PolicyName: "ElkS3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource:
                  - !Join ["", ["arn:aws:s3:::",!Ref S3BucketName]]
                  - !Join ["", ["arn:aws:s3:::", !Ref S3BucketName, "/*"]]
  ElkS3Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref ElkS3Role
  ElkInstance:
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: "ami-0915e09cc7ceee3ab" # This is the latest Amazon Linux AMI that I found as of 4/21/2020
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ElkS3Profile
      KeyName: !Ref KeyName
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: ELK-Instance
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash -ex
            yum install java-1.8.0-openjdk -y
            yum install git -y
            pip install elasticsearch
            aws s3 cp s3://${S3BucketName}/ /home/ec2-user --recursive
            cd /home/ec2-user
            git clone https://github.com/mperdom/vol_elastic.git git-volastic
            chmod 777 /home/ec2-user/git-volastic/volastic/vol.py
            mv /home/ec2-user/vm.vmem /home/ec2-user/git-volastic/volastic/
            chown -R ec2-user:ec2-user /home/ec2-user/git-volastic/volastic/
            ln -sfn /usr/lib/jvm/jre-1.8.0-openjdk.x86_64 /etc/alternatives/jre
            export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk.x86_64
            wget -O /home/ec2-user/elasticsearch-7.6.2-x86_64.rpm https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.2-x86_64.rpm
            wget -O /home/ec2-user/kibana-7.6.2-x86_64.rpm https://artifacts.elastic.co/downloads/kibana/kibana-7.6.2-x86_64.rpm
            wget -O /home/ec2-user/logstash-7.8.0.rpm https://artifacts.elastic.co/downloads/logstash/logstash-7.8.0.rpm
            rpm --install elasticsearch-7.6.2-x86_64.rpm
            rpm --install kibana-7.6.2-x86_64.rpm
            rpm --install logstash-7.8.0.rpm
            chkconfig --add elasticsearch
            chkconfig --add kibana
            service elasticsearch start
            service kibana start
            # Create a file to easily copy and paste example curl commands
            echo 'curl -X POST "localhost:5601/api/saved_objects/_import" -H "kbn-xsrf: true" --form file=@/home/ec2-user/cfrs772-demo.ndjson' > example_commands
            echo '/home/ec2-user/git-volastic/volastic/vol.py -f "/home/ec2-user/git-volastic/volastic/vm.vmem" --profile=WinXPSP2x86 --output=elastic --elastic-url="http://127.0.0.1:9200" pstree' >> example_commands
            echo '/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/test-simple.conf' >> example_commands
            ### I found that rpm is easier and more reliable for automation, so I commented out the tar method ###
            #aws s3 cp s3://cfrs772-elk/elasticsearch-7.6.2-linux-x86_64.tar.gz /home/ec2-user
            #aws s3 cp s3://cfrs772-elk/kibana-7.6.2-linux-x86_64.tar.gz /home/ec2-user
            #tar -xzf elasticsearch-7.6.2-linux-x86_64.tar.gz
            #tar -xzf kibana-7.6.2-linux-x86_64.tar.gz
            #chown -R ec2-user:ec2-user /home/ec2-user/elasticsearch-7.6.2 /home/ec2-user/kibana-7.6.2-linux-x86_64
            #chown -R ec2-user:ec2-user /home/ec2-user/elasticsearch-7.6.2/config/
            #su ec2-user /home/ec2-user/elasticsearch-7.6.2/bin/elasticsearch -d
            #/home/ec2-user/kibana-7.6.2-linux-86_64/bin/kibana
          - {
              #Perform the FindInMap and Ref lookups for variables used in userdata script
              S3BucketName: !Ref S3BucketName,
            }

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Enable SSH, HTTP, Elastic, & Kibana"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref SSHLocation